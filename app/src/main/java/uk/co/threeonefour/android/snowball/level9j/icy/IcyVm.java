/***********************************************************************\
 *
 * Java Level 9 interpreter
 * Copyright (c) 2011, Paul Illingworth, www.threeonefour.co.uk
 * 
 * Based version Level 9 version 5 interpreter which is 
 * Copyright (c) 1996-2011 Glen Summers and contributors.
 * Contributions from David Kinder, Alan Staniforth, Simon Baldwin,
 * Dieter Baron and Andreas Scherrer.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111, USA.
 *
 ***********************************************************************/
package uk.co.threeonefour.android.snowball.level9j.icy;

import uk.co.threeonefour.android.snowball.basics.lang.StringUtils;
import uk.co.threeonefour.android.snowball.level9j.ptr.StaticReadOnlyIntPtr;
import uk.co.threeonefour.android.snowball.level9j.vm.CodeFollow;
import uk.co.threeonefour.android.snowball.level9j.vm.FileHandler;
import uk.co.threeonefour.android.snowball.level9j.vm.GameState;
import uk.co.threeonefour.android.snowball.level9j.vm.GameStateFactory;
import uk.co.threeonefour.android.snowball.level9j.vm.GraphicsHandler;
import uk.co.threeonefour.android.snowball.level9j.vm.TextHandler;
import uk.co.threeonefour.android.snowball.level9j.vm.Vm;

/**
 * <p>
 * I Call You interface.
 * </p>
 * <p>
 * Inverts control. Instead of the VM running the show making calls back to the host demanding input and output this
 * swaps control around so the VM in effect becomes an API. The calling client provides the input, the VM is called and
 * the resulting output generated by the VM is returned (or made available) to the calling client.
 * </p>
 * <p>
 * This is ideal for web environments
 * </p>
 * 
 * @author pauli
 * 
 */
public class IcyVm implements Icy {

    private final Vm l9vm;
    private final IcyTextHandler icyText;

    private BreakType breakType;
    private String text;

    public IcyVm(GraphicsHandler callbackGraphics, FileHandler callbackFile, GameStateFactory gameStateFactory) {
        this.icyText = new IcyTextHandler();
        this.l9vm = new Vm(icyText, callbackFile, callbackGraphics, new CodeFollow(), gameStateFactory);
    }

    @Override
    public void loadGame(byte[] bytes) {

        l9vm.loadGame(new StaticReadOnlyIntPtr("file", bytes));
    }

    @Override
    public void startGame() {
        l9vm.startGame();
        runUntilBreak();
    }

    @Override
    public void stopGame() {

        l9vm.stopGame();
        runUntilBreak();
    }

    public BreakType icyBreak() {

        return breakType;
    }

    @Override
    public void execute(String command) {

        if (breakType == BreakType.INPUT) {
            icyText.setInput(command);
        } else if (breakType == BreakType.READCHAR) {
            icyText.setReadChar(StringUtils.isEmpty(command) ? '\r' : command.charAt(0));
        }
        runUntilBreak();
    }

    private void runUntilBreak() {

        // run until input called
        breakType = BreakType.NONE;
        while (l9vm.isRunning()) {
            if (breakType != BreakType.NONE && !icyText.hasInput()) {
                break;
            } else {
                l9vm.runGame();
            }
            breakType = l9vm.icyBreak();
        }

        text = icyText.output();
    }

    @Override
    public String getText() {
        return text;
    }

    @Override
    public boolean isRunning() {
        return l9vm.isRunning();
    }

    static final class IcyTextHandler implements TextHandler {

        private final StringBuilder output = new StringBuilder();
        private String input;
        private char readChar;

        @Override
        public void printChar(char c) {

            output.append(c);
        }

        @Override
        public String input() {

            String str = input;
            input = null;
            return str;
        }

        @Override
        public char readChar(int millis) {

            return readChar;
        }

        @Override
        public boolean stopList() {

            return false;
        }

        @Override
        public void flush() {

            // ignore; nothing to do
        }

        public String output() {

            String str = output.toString();
            output.setLength(0);
            return str;
        }

        public void setInput(String input) {

            this.input = input;
        }

        public void setReadChar(char readChar) {

            this.readChar = readChar;
        }

        public boolean hasInput() {
            return input != null;
        }
    }

    @Override
    public String getStatus() {
        return null;
    }

    @Override
    public void setGameState(GameState gameState) {
        l9vm.setGameState(gameState);
    }

    @Override
    public GameState getGameState() {
        return l9vm.getGameState();
    }

}
